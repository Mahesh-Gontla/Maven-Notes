Maven -- Maven is an application build tool to build a Java application

Eg:-   .java -----compile-------> .class
       source             target/executable
      
Compiler:- is a software it will help to convert from high-level language to low-level language or Machine language

   .java ----> .class(bundle) ----> .jar(bundle) ----> .war
   
The group of .class files is called a .jar file (java archive)
The group of .jar files is called a .war file (web archive)
.ear (enterprise web archive)

Maven -- application build tool and project management tool
pom.xml -- configuration file for maven
Maven uses pom.xml(project object modules) to define the project and its dependencies. 
---- It will help to build the structure of the project, associate the files and help to build the application.

Pre-Requisites: Need to install Java environment on Linux Machine
java -- sudo yum install java-11-openjdk -y
javac -- sudo yum install java-11-openjdk-devel -y

How to download and install Maven?
1) Go to the Maven site, and download the .tar.gz file
wget https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz
2)extract the file (tar xvfz apache-maven-xxx.tar.gz -C /opt/)
tar -xvzf apache-maven-3.9.4-bin.tar.gz -C /opt/
ls -l /opt/
sudo chown -R ec2-user:ec2-user /opt/apache-maven-3.9.4/ -- for user executing 
ls -l /opt/
3)configure it for a user 
   mvn -- it won't work in the user's directory
   export M2_HOME=/opt/apache-maven-3.9.4/
   export PATH=$PATH:$M2_HOME/bin
   mvn --version
   ls -a
   vi .bash_profiel
   export M2_HOME=/opt/apache-maven-3.9.4/
   export PATH=$PATH:$M2_HOME/bin
   configure on the command line and make them permanent so place in user home_dir ~/user/.bash_profile
4)mvn --version

Maven commands:
1)mvn archetype:generate  -- it will create a project structure
2)mvn validate    -- it will validate project structure
3)mvn compile     -- it will convert .java files into .class files
4)mvn test        -- it will test .class files
5)mvn package     -- it will help to create .jar,.war or .ear
6)mvn install     -- it will install the package locally
7)mvn deploy      -- it will install the package remotely.

Creating a Sample Jar File using Maven
1)mvn archetype:generate
  project number :
  group id       : unique project name (technical adda)
  artifact id    : output file name (simplejar.jar)
  package id    : same as group id
  version        : 1.0-SNAPSHOT
  ls
  tree .
Need to go for a simple jar dir there we have to execute the commands
2)mvn validate
3)mvn compile
 tree .
4)mvn test 
5)mvn package
 tree . 
 
 To see the content in the .jar file  
 jar -tvf target/simplejar-1.0-SNAPSHOT.jar
 java -cp target/simplejar-1.0-SNAPSHOT.jar technicaladda.App



MAVEN
It is an Automation Project management tool developed by the Apache software foundation.
It is based on POM (Project Object Model). (POM.xml) xml: eXtensible Markup Language.
It is a build tool and manages dependencies.
It can build any number of projects into desired Output such as .jar, .war, and metadata.
It is mostly used for Java-based projects.
It was initially released on 13 July 2004.
Maven is written in Java.
Meaning of Maven is Accumulator of Knowledge in the Yiddish language.
Maven helps in getting the right jar file for each project as there may be
different versions of separate packages.
For downloading dependencies visit mvnrepository.com

Dependencies -- These refer to the Java libraries that are needed for the project

Repositories --  Refers to the directories of Packaged jar files.

java-code ----compile----> .class (it will give jar file -- java archive)
.jar ----> .war (web archive)
.ear (combination of .jar and .war -- enterprise archive)

Build tools:
1) C, C ++ : make a file
2) .Net : Visual studio
3) Java : Ant, Maven, Gradle

Java Project Structure:
source code --> project structure --> Dependencies/library --> Test --> Reporting

Maven Uses:
It makes the project easy to build
Easy to add new dependencies
This tool helps them get the right jar files for each project as there may be different versions of the project

PROBLEMS WITHOUT MAVEN:
>> Adding a set of jars in each project: In the case of Struts, Springs we need to add jar files in each project. It must include all the dependencies of jars also.
>> Creating the right project structure: We must create the right project structure in Servlet, Struts, etc. Otherwise, it will not be executed.
>>Building and Deploying the Project: We must build and deploy the Project, so it may work.

WHAT MAVEN DOES?
>> It makes the project easy to build
>> Provides Project Information (log document, cross reference, sources, mailing list, unit test).
>> Easy to add New Dependencies.
>> Apache Maven helps to manage: Build, Dependencies, Releases, Distribution, Reports

WHAT IS A BUILD TOOL?
>> A build tool takes care of everything for building a process. It follows
>> Generate Source Code.
>> Generate Documentation for Source code.
>> Compile Source Code.
>> Install the Package code in the local repo. Server repo or Central repo.
>> POM refers to the XML file that has all information regarding project and configuration details
>> Main configuration file is in pom.xml.
>> It has a description of the Project details regarding version and configuration management.
>> The XML file is in the Project home directory.

Pom.xml contains
>> Metadata.
>> Dependencies.
>> Kind of Project.
>> Kind of Output.
>> Description.
---------- One project consists — > One workspace consists — > of only One pom.xml file.
REQUIREMENTS FOR BUILD:
>> Source code : Present in the workspace.
>> Compiler : Remote repo — > Local repo — > Workspace.
>> Dependencies : Remote repo — > Local repo — > Workspace.

MAVNE BUILD LIFE CYCLE
>> Generate Resources (Dependencies)
>> Compile Code
>> Unit test
>> Package (Build)
>> Install (into Local repo and Artifactory)
>> Deploy (to Servers)
>> Clean (to delete all the Runtime files) — > Optional
Ex: mvn install, mvn clean package
>> Build lifecycle consists of sequence build phases &each build phase consist sequence of goals
>> Each goal is responsible for a particular task. Goals are nothing but commands.
>> When a phase is run, all the goals related to that phase and its plugins are also compiled.

Maven Compile:
Compiles source code of the project.
Maven Test:
Runs test for the project.
Maven Package:
Creates JAR or WAR files for the project to convert it into a distributable format.
Maven Deploy:
Copies the packaged JAR/ WAR file to the remote repository after compiling, running
tests and building the project.
Maven Clean:
Cleans the project and removes all files generated by the previous build.

